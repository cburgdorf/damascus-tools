#!/usr/bin/env python

from prompt_toolkit import PromptSession
from prompt_toolkit.history import FileHistory
from os.path import expanduser
from prompt_toolkit.lexers import PygmentsLexer

from os import system
import sys
import nrepl
from pygments.formatters import TerminalFormatter
from pygments.lexers.jvm import ClojureLexer
from pygments import highlight
import subprocess

import signal
from sys import exit


def handler(signal_received, frame):
    # Handle any cleanup here
    print('SIGINT or CTRL-C detected. Exiting gracefully')
    exit(0)


def cprint(code):
    print(highlight(code, ClojureLexer(), TerminalFormatter()))


# the current implementation will use the normal REPL
# I leave this here because maybe in the future it could
# have some use....
# you aint gonna need it?
# who cares!!!
def send2NREPL(nreplPort, clojureCode):
    conn = nrepl.connect(f"nrepl://localhost:{nreplPort}")
    conn.write({"op": "eval", "code": clojureCode})
    result = conn.read()
    sys.stdout.flush()
    if 'err' in result:
        cprint(result['err'])
    if 'value' in result:
        cprint(result['value'])


# program execution starts here
if len(sys.argv) == 1:
    nreplPort = '1667'
else:
    nreplPort = sys.argv[1]

nreplProcess = subprocess.Popen(
    ['bb', 'nrepl-server', nreplPort],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE)

replProcess = subprocess.Popen(
    ['bb', 'repl'],
    stdout=subprocess.PIPE,
    stdin=subprocess.PIPE,
    stderr=subprocess.PIPE)

# normal REPL is REPL and NOT Nrepl
# plain and simple stdout and stdin redirection
# this will be colored and matched for autocompletion


def send2REPL(clojureCode):
    #  replProcess.stdin.write(clojureCode.encode('utf-8'))
    #  replProcess.stdin.close()
    replProcess.communicate(clojureCode.encode('utf-8'))
    #  result = replProcess.stdout.read()
    #  cprint(result)


myPromptSession = PromptSession(
    history=FileHistory(expanduser('~/.bbc_history')))

cprint('\n\n  Welcome to BBC! \n\n')

# Tell Python to run the handler() function when SIGINT is recieved
signal.signal(signal.SIGINT, handler)  # ctlr + c
signal.signal(signal.SIGTSTP, handler)  # ctlr + z

while True:
    userInput = myPromptSession.prompt(
        'BBC >>>:\n', lexer=PygmentsLexer(ClojureLexer))
    #  send2NREPL(nreplPort, userInput)
    send2REPL(userInput)
